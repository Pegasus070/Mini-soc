name: mini-soc-ci

on:
  push:
    branches: [ main, master ]
  pull_request:

concurrency:
  group: mini-soc-ci-${{ github.ref }}
  cancel-in-progress: false

env:
  WAZUH_VERSION: "4.7.0"

jobs:
  build-and-scan:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Quick static check (placeholder)
        run: |
          echo "Build & scan step placeholder"

  test:
    needs: build-and-scan
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set kernel params for OpenSearch
        shell: bash
        run: |
          set -euo pipefail
          echo "vm.max_map_count=262144" | sudo tee /etc/sysctl.d/99-wazuh.conf
          sudo sysctl -p /etc/sysctl.d/99-wazuh.conf || sudo sysctl -w vm.max_map_count=262144

      - name: Ensure Docker is usable & init Swarm
        shell: bash
        run: |
          set -euo pipefail
          sudo docker info >/dev/null
          sudo docker node ls >/dev/null 2>&1 || sudo docker swarm init --advertise-addr 127.0.0.1 || true

      - name: Deploy temporary test stack (indexer only, security disabled)
        shell: bash
        run: |
          set -euo pipefail
          sudo docker stack deploy -c stack/wazuh-stack-test.yml wazuh-test
          echo "--- Services ---"
          sudo docker stack services wazuh-test || true

      - name: Wait for Wazuh Indexer (OpenSearch) to become healthy
        shell: bash
        timeout-minutes: 15
        run: |
          set -euo pipefail
          NET=wazuh-test_soc
          SVC=wazuh-test_wazuh-indexer

          attempts=90
          sleep_secs=5

          for i in $(seq 1 $attempts); do
            echo "[$i/$attempts] Checking service and HTTP..."

            # Is the swarm service up (1/1)?
            if sudo docker service ls --format '{{.Name}} {{.Replicas}}' | grep -q "^${SVC} 1/1$"; then
              echo "Service ${SVC} is 1/1."
            else
              sudo docker service ls | sed -n '1,999p'
            fi

            # Hit the root endpoint first; accept 200 or 401
            HTTP=$(sudo docker run --rm --network "$NET" curlimages/curl:8.9.1 \
                      -sS -m 5 -w ' HTTP%{http_code}' http://wazuh.indexer:9200/ || true)
            echo "Root response: ${HTTP:0:120}"

            CODE="${HTTP##*HTTP}"
            CODE="${CODE#HTTP}"
            CODE="${CODE##* }"
            CODE="${CODE:-000}"

            if [ "$CODE" = "200" ] || [ "$CODE" = "401" ]; then
              # Now check cluster health; accept green|yellow|red
              STATUS=$(sudo docker run --rm --network "$NET" curlimages/curl:8.9.1 \
                         -sS -m 5 'http://wazuh.indexer:9200/_cluster/health?h=status' | tr -d '\r')
              echo "Cluster status: '$STATUS'"
              case "$STATUS" in
                green|yellow|red) echo "OpenSearch is up."; exit 0 ;;
              esac
            fi
            sleep "$sleep_secs"
          done

          echo "OpenSearch did not become healthy in time. Dumping diagnostics..."
          sudo docker service ps "$SVC" --no-trunc || true
          sudo docker service logs -n 200 "$SVC" || true
          exit 1

      - name: Basic API sanity checks (optional)
        if: success()
        shell: bash
        run: |
          set -euo pipefail
          sudo docker run --rm --network wazuh-test_soc curlimages/curl:8.9.1 \
            -s http://wazuh.indexer:9200
          sudo docker run --rm --network wazuh-test_soc curlimages/curl:8.9.1 \
            -s http://wazuh.indexer:9200/_cat/indices

      - name: Cleanup test stack
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          sudo docker stack rm wazuh-test || true
          for i in $(seq 1 40); do
            if ! sudo docker stack services wazuh-test >/dev/null 2>&1; then
              echo "Stack removed."
              break
            fi
            sleep 2
          done

  deploy:
    needs: test
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Placeholder deploy
        run: |
          echo "Your real deployment steps go here (Ansible, etc.)"
