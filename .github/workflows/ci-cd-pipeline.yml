# .github/workflows/wazuh-soc.yml
name: Wazuh SOC CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  WAZUH_VERSION: 4.7.0

jobs:
  # ──────────────────────────────
  # 1) Build and Trivy scan  (REQUIRED)
  # ──────────────────────────────
  build-and-scan:
    runs-on: [self-hosted, linux, x64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build or pull Wazuh Manager image
        id: build
        run: |
          set -e
          if [ -f "docker/wazuh-manager/Dockerfile" ]; then
            docker build -t wazuh-manager:${{ github.sha }} docker/wazuh-manager/
          else
            docker pull wazuh/wazuh-manager:${WAZUH_VERSION}
            docker tag wazuh/wazuh-manager:${WAZUH_VERSION} wazuh-manager:${{ github.sha }}
          fi

      - name: Prep disk space for Trivy
        run: |
          docker system prune -af || true
          mkdir -p "$HOME/.cache/trivy" "$HOME/.cache/trivy/tmp"
          df -h

      - name: Fetch Trivy HTML template
        run: curl -fsSL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl -o html.tpl

      - name: Run Trivy vulnerability scanner (Docker → HTML)
        run: |
          set -euo pipefail
          CACHE_DIR="$HOME/.cache/trivy"
          DB_REPO="ghcr.io/aquasecurity/trivy-db:2"
          TIMEOUT="20m"
          mkdir -p "$CACHE_DIR"

          if ! docker image inspect wazuh-manager:${{ github.sha }} >/dev/null 2>&1; then
            docker pull wazuh/wazuh-manager:${WAZUH_VERSION}
            docker tag  wazuh/wazuh-manager:${WAZUH_VERSION}  wazuh-manager:${{ github.sha }}
          fi

          trivy image \
            --docker-host "unix:///var/run/docker.sock" \
            --scanners vuln \
            --cache-dir "$CACHE_DIR" \
            --db-repository "$DB_REPO" \
            --timeout "$TIMEOUT" \
            --severity CRITICAL,HIGH \
            --exit-code 1 \
            --format template --template "@html.tpl" \
            --output trivy-report.html \
            wazuh-manager:${{ github.sha }}

      - name: Upload Trivy Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.html

  # ──────────────────────────────
  # 2) Test stack (OPTIONAL + PRs only + non-blocking)
  # ──────────────────────────────
  test:
    if: github.event_name == 'pull_request'   # ← only on PRs
    continue-on-error: true                   # ← never block the pipeline
    runs-on: [self-hosted, linux, x64]
    needs: build-and-scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Kernel params for OpenSearch
        run: |
          sudo sysctl -w vm.max_map_count=262144
          sudo sysctl -w fs.file-max=65536

      - name: Ensure Docker usable & init Swarm
        run: |
          docker version
          docker info
          docker swarm init || true

      - name: Deploy temporary test stack
        run: |
          set -euo pipefail
          STACK=wazuh-test
          docker stack deploy -c stack/wazuh-stack.yml "$STACK"
          for i in {1..60}; do
            READY=$(docker stack services "$STACK" --format '{{.Replicas}}' | awk -F/ '$1==$2' | wc -l)
            TOTAL=$(docker stack services "$STACK" --format '{{.Replicas}}' | wc -l)
            echo "Services ready: $READY/$TOTAL"
            [ "$READY" = "$TOTAL" ] && break || sleep 5
          done

      - name: Wait for Wazuh API (inside overlay)
        run: |
          set -e
          STACK=wazuh-test
          NET="${STACK}_soc"
          for i in {1..60}; do
            CODE=$(docker run --rm --network "$NET" curlimages/curl:8.10.1 \
                     -sk -o /dev/null -w '%{http_code}' https://wazuh.manager:55000 || true)
            echo "Manager API HTTP: $CODE"
            case "$CODE" in
              200|401|403) exit 0 ;;
            esac
            sleep 5
          done
          exit 1

      - name: Upload Docker service states (for debugging)
        if: always()
        run: |
          docker service ls || true
          docker service ps wazuh-test_wazuh-indexer --no-trunc || true
          docker service ps wazuh-test_wazuh-manager --no-trunc || true
          docker service ps wazuh-test_wazuh-dashboard --no-trunc || true

      - name: Cleanup test stack
        if: always()
        run: |
          STACK=wazuh-test
          docker stack rm "$STACK" || true
          for i in {1..30}; do
            docker stack ps "$STACK" >/dev/null 2>&1 || break
            sleep 2
          done
          docker system prune -af --volumes || true

  # ──────────────────────────────
  # 3) Deploy (REQUIRED) — proceeds even if tests fail/are skipped
  # ──────────────────────────────
  deploy:
    runs-on: [self-hosted, linux, x64]
    needs: [build-and-scan]         # ← no longer depends on 'test'
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Ansible vault password
        run: |
          echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > .vault_pass
          chmod 600 .vault_pass

      - name: Ensure Docker Swarm initialized
        run: docker swarm init || true

      - name: Deploy via Ansible
        run: |
          ansible-playbook \
            -i ansible/inventory/production.yml \
            --vault-password-file .vault_pass \
            -e "image_tag=${{ github.sha }}" \
            ansible/playbooks/deploy.yml

      - name: Verify deployment
        run: |
          docker stack services wazuh-soc
          python3 tests/api/health_check.py

      - name: Cleanup sensitive files
        if: always()
        run: rm -f .vault_pass
