name: Wazuh SOC CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  WAZUH_VERSION: 4.7.0

jobs:
  # ──────────────────────────────
  # 1) Build and Trivy scan
  # ──────────────────────────────
  build-and-scan:
    runs-on: [self-hosted, linux, x64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build custom image if you have a Dockerfile; otherwise pull the official one
      - name: Build or pull Wazuh Manager image
        id: build
        run: |
          set -e
          if [ -f "docker/wazuh-manager/Dockerfile" ]; then
            docker build -t wazuh-manager:${{ github.sha }} docker/wazuh-manager/
          else
            docker pull wazuh/wazuh-manager:${WAZUH_VERSION}
            docker tag wazuh/wazuh-manager:${WAZUH_VERSION} wazuh-manager:${{ github.sha }}
          fi

      - name: Prep disk space for Trivy
        run: |
          docker system prune -af || true
          mkdir -p "$HOME/.cache/trivy" "$HOME/.cache/trivy/tmp"
          df -h

      - name: Fetch Trivy HTML template
        run: curl -fsSL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl -o html.tpl

      # Trivy uses Docker socket explicitly, fails on HIGH/CRITICAL, but still produces HTML
      - name: Run Trivy vulnerability scanner (Docker engine → HTML)
        run: |
          set -euo pipefail
          CACHE_DIR="$HOME/.cache/trivy"
          DB_REPO="ghcr.io/aquasecurity/trivy-db:2"
          TIMEOUT="20m"
          mkdir -p "$CACHE_DIR"

          # Ensure the local image exists (pull-and-retag fallback)
          if ! docker image inspect wazuh-manager:${{ github.sha }} >/dev/null 2>&1; then
            echo "Local tag not found; pulling official image and retagging…"
            docker pull wazuh/wazuh-manager:${WAZUH_VERSION}
            docker tag  wazuh/wazuh-manager:${WAZUH_VERSION}  wazuh-manager:${{ github.sha }}
          fi

          trivy image \
            --docker-host "unix:///var/run/docker.sock" \
            --scanners vuln \
            --cache-dir "$CACHE_DIR" \
            --db-repository "$DB_REPO" \
            --timeout "$TIMEOUT" \
            --severity CRITICAL,HIGH \
            --exit-code 1 \
            --format template --template "@html.tpl" \
            --output trivy-report.html \
            wazuh-manager:${{ github.sha }}

      - name: Upload Trivy Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.html

  # ──────────────────────────────
  # 2) Spin test stack + run Selenium
  # ──────────────────────────────
  test:
    runs-on: [self-hosted, linux, x64]
    needs: build-and-scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Ensure this runner can use Docker and Swarm is ready
      - name: Ensure Docker is usable & init Swarm
        run: |
          docker version
          docker info
          docker swarm init || true

      - name: Deploy temporary test stack
        run: |
          set -euo pipefail
          STACK=wazuh-test
          docker stack deploy -c stack/wazuh-stack.yml "$STACK"
          echo "Waiting for services to report desired replicas…"
          for i in {1..60}; do
            READY=$(docker stack services "$STACK" --format '{{.Replicas}}' | awk -F/ '$1==$2' | wc -l)
            TOTAL=$(docker stack services "$STACK" --format '{{.Replicas}}' | wc -l)
            echo "Services ready: $READY/$TOTAL"
            [ "$READY" = "$TOTAL" ] && break || sleep 5
          done

      # Verbose readiness with logs (up to ~20 minutes)
      - name: Wait for Wazuh dashboard on https://localhost:443
        run: |
          set -euo pipefail
          STACK=wazuh-test
          echo "Waiting for HTTPS 443 to respond (up to ~20 minutes)…"
          for i in {1..240}; do
            if curl -skfI https://localhost:443 >/dev/null; then
              echo "✅ Dashboard reachable on 443"
              exit 0
            fi
            echo "Still waiting ($i/240)…"
            echo "---- service list ----"
            docker stack services "$STACK" || true
            echo "---- dashboard logs (last 100) ----"
            docker service logs "$STACK"_wazuh-dashboard --tail 100 || true
            echo "----------------------"
            sleep 5
          done
          echo "❌ Dashboard did not become ready in time"
          docker service ps "$STACK"_wazuh-dashboard || true
          exit 1

      # System deps for Selenium (Chromium + chromedriver)
      - name: Install Chromium & chromedriver
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser chromium-chromedriver || true
          which chromedriver || true

      - name: Create Python venv & install test deps
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install selenium pytest pytest-html webdriver-manager

      - name: Run Selenium tests
        run: |
          source .venv/bin/activate
          pytest tests/selenium/test_dashboard.py -v --html=selenium-report.html

      - name: Upload Selenium report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: selenium-report
          path: selenium-report.html

      - name: Cleanup test stack
        if: always()
        run: |
          STACK=wazuh-test
          docker stack rm "$STACK" || true
          # give it a moment to go away; ignore errors
          for i in {1..30}; do
            docker stack ps "$STACK" >/dev/null 2>&1 || break
            sleep 2
          done
          docker system prune -af --volumes || true

  # ──────────────────────────────
  # 3) Deploy to Swarm with Ansible (main branch pushes only)
  # ──────────────────────────────
  deploy:
    runs-on: [self-hosted, linux, x64]
    needs: [build-and-scan, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Ensure you've created repo secret ANSIBLE_VAULT_PASSWORD
      - name: Configure Ansible vault password
        run: |
          echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > .vault_pass
          chmod 600 .vault_pass

      - name: Ensure Docker Swarm initialized
        run: docker swarm init || true

      # Ansible must already be installed on the self-hosted runner
      - name: Deploy via Ansible
        run: |
          ansible-playbook \
            -i ansible/inventory/production.yml \
            --vault-password-file .vault_pass \
            -e "image_tag=${{ github.sha }}" \
            ansible/playbooks/deploy.yml

      - name: Verify deployment
        run: |
          docker stack services wazuh-soc
          python3 tests/api/health_check.py

      - name: Cleanup sensitive files
        if: always()
        run: rm -f .vault_pass
